#!/usr/bin/env python3
"""
This is a custom CGI-style script that manages the guestbook operations.
"""

import os
import sqlite3
import argparse
import textwrap
from datetime import datetime

import requests
from unidecode import unidecode


# Free service, hopefully this one sticks around for a while
GEOIP_URL = 'http://freegeoip.net/json/{0}'

DB_FILE = '/var/lib/hngopher/hngopher.db'


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=['dump', 'new', 'submit'])
    parser.add_argument('--debug', action='store_true')
    return parser.parse_args()


def connect_db():
    """
    Storing guestbook info in a local sqlite database.
    """
    db = sqlite3.connect(DB_FILE, detect_types=sqlite3.PARSE_DECLTYPES)
    c = db.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS `guestbook` (
          id int PRIMARY KEY,
          session int,
          message text,
          created timestamp,
          ip_address text,
          ip_location text);
        """)
    db.commit()
    return db, c


def get_location(ip_address):
    """
    Uses a free API service to geo-locate the user's IP address.
    """
    try:
        resp = requests.get(GEOIP_URL.format(ip_address), timeout=5)
        data = resp.json()
        return '{city}, {region_name}, {country_name}'.format(**data)
    except Exception:
        return 'Somewhere on planet Earth'


def sanitize(text):
    return unidecode(text)


def main():

    args = parse_args()
    db, c = connect_db()

    if args.command == 'dump':
        c.execute("""
            SELECT
              created,
              ip_location,
              message
            FROM guestbook
            ORDER BY created DESC
            """)
        for row in c.fetchall():
            print('i' + '-=' * 35)
            print('i ')
            print('i' + row[0].strftime('%Y-%m-%d %H:%M UTC'))
            print('i' + row[1])
            print('i ')
            for line in row[2].split('\n'):
                print('i' + line)
            print('i ')
        print('i' + '-=' * 35)
        print('i' + 26 * ' ' + '~ Thank you ~')

    elif args.command == 'new':
        # Display the new message form
        print('iPlease use the following query to post a brief message')
        print('i ')
        print('i' + '-' * 70)
        print('7Enter text here:	/guestbook/new/submit')
        print('i' + '-' * 70)

    elif args.command == 'submit':
        # Submit the query text to the guestbook
        message = sanitize(os.environ['QUERY_STRING'])
        message = '\n'.join(textwrap.wrap(message, 65)[:10])
        if not message:
            print('iError, no text submitted!')
            print('i ')

        else:
            timestamp = datetime.utcnow()
            ip_address = os.environ['REMOTE_ADDR']
            ip_location = get_location(ip_address)
            session_id = os.environ['SESSION_ID']

            c.execute("""
                INSERT INTO guestbook(
                  session,
                  message,
                  created,
                  ip_address,
                  ip_location)
                VALUES (?, ?, ?, ?, ?);
                """, (session_id, message, timestamp, ip_address, ip_location))
            db.commit()

            print('iYour message has been posted!')
            print('i ')
            print('iIn order to see your submission, you might need to reload')
            print('iyour gopher client in order to refresh the page cache.')

    if args.debug:
        # Dumps all of the CGI environment variables to the page
        for key, val in sorted(os.environ.items()):
            print('i{:20}: {}'.format(key, val))


try:
    main()
except Exception as e:
    # Catch all exceptions to prevent dumping potentially sensitive
    # text to stdout/stderr
    print('iERROR: The server has encountered a fatal error')
