#!/usr/bin/env python3
"""
This is a custom CGI-style script that manages the guestbook operations.
"""

import os
import sqlite3
import argparse
import textwrap
from datetime import datetime

import redis
import requests
from unidecode import unidecode


# Free service, hopefully this one sticks around for a while
GEOIP_URL = 'http://freegeoip.net/json/{ip_address}'

DB_FILE = '/var/lib/hngopher/hngopher.db'
REDIS_DB = 0


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=['dump', 'message', 'new', 'submit'])
    parser.add_argument('--debug', action='store_true')
    return parser.parse_args()


def connect_cache():
    """
    The gopher protocol doesn't allow passing sessions via headers or
    cookies, so I had to create a server-side cache to store the
    fields that have been entered on the guestbook page.
    """
    return redis.StrictRedis(db=REDIS_DB)


def connect_db():
    """
    Storing guestbook info in a local sqlite database.
    """
    db = sqlite3.connect(DB_FILE, detect_types=sqlite3.PARSE_DECLTYPES)
    c = db.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS `guestbook` (
          id int PRIMARY KEY,
          session int,
          message text,
          created timestamp,
          ip_address text,
          ip_location text);
        """)
    db.commit()
    return db, c


def get_location(ip_address):
    """
    Uses a free API service to geo-locate the user's IP address.
    """
    try:
        resp = requests.get(GEOIP_URL.format(ip_address), timeout=5)
        data = resp.json()
        return '{city}, {region_name}, {country_name}'.format(**data)
    except Exception:
        return 'Somewhere on planet Earth'


def sanitize(text):
    return unidecode(text)


def new_message_prompt(message=None):

    print('iPlease enter a short message using the query below. You will ')
    print('ihave an opportunity to preview your submission before posting it.')
    print('i ')
    print('i' + '-' * 70)

    if message:
        for line in message.split('\n'):
            print('i' + line)
        print('i' + '-' * 70)
        print('i ')
        print('1Reset	/guestbook/new')
        print('1Submit	/guestbook/new/submit')
    else:

        print('7Enter Message:	/guestbook/new/message')
        print('i' + '-' * 70)
        print('i ')


def main():

    args = parse_args()
    db, c = connect_db()
    cache = connect_cache()

    session_id = os.environ['SESSION_ID']

    session = {k.decode(): v.decode() for k, v in cache.hgetall(session_id).items()}

    if args.command == 'dump':
        c.execute("""
            SELECT
              created,
              ip_location,
              message
            FROM guestbook
            ORDER BY created DESC
            """)
        for row in c.fetchall():
            print('i' + '-=' * 35)
            print('i ')
            print('i' + row[0].strftime('%Y-%m-%d %H:%M UTC'))
            print('i' + row[1])
            for line in row[2].split('\n'):
                print('i' + line)
            print('i ')
        print('i' + '-=' * 35)
        print('i' + 26 * ' ' + '~ Thank you ~')

    elif args.command == 'message':
        message = sanitize(os.environ['QUERY_STRING'])
        message = '\n'.join(textwrap.wrap(message, 70)[:10])
        cache.hset(session_id, 'message', message)
        cache.expire(session_id, 600)
        new_message_prompt(message=message)

    elif args.command == 'new':
        # Display the new message form
        cache.delete(session_id)
        new_message_prompt(message=None)

    elif args.command == 'submit':
        # Submit the message to the guestbook
        message = session.get('message')
        if not message:
            print('iError, missing message!')
            print('i ')
            new_message_prompt(message=None)

        else:
            timestamp = datetime.utcnow()
            ip_address = os.environ['REMOTE_ADDR']
            ip_location = get_location(ip_address)

            c.execute("""
                INSERT INTO guestbook(
                  session,
                  message,
                  created,
                  ip_address,
                  ip_location)
                VALUES (?, ?, ?, ?, ?);
                """, (session_id, message, timestamp, ip_address, ip_location))
            db.commit()

            print('iMessage submitted!')
            print('i ')
            print('iIn order to see your message, you might need to reload your')
            print('igopher client to clear any cached pages.')
            cache.delete(session_id)

    if args.debug:
        # Dumps all of the CGI environment variables to the page
        for key, val in sorted(os.environ.items()):
            print('i{:20}: {}'.format(key, val))

        # Dumps the user's session variables
        print('i ')
        print('i--- SESSION CACHE ---')
        for key, val in sorted(cache.hgetall(session_id).items()):
            print('i{:20}: {}'.format(key.decode(), val.decode()))


try:
    main()
except Exception as e:
    # Catch all exceptions to prevent dumping potentially sensitive
    # text to stdout/stderr
    print('iERROR: The server has encountered a fatal error')
